/* automatically generated by rust-bindgen */

pub const STRING_GFLAGS_NULL: u32 = 4096;
pub const ERROR_SUCCESS: u32 = 0;
pub const ERROR_INSUFICIENT_MEMORY: u32 = 1;
pub const ERROR_INSUFFICIENT_MEMORY: u32 = 1;
pub const ERROR_COULD_NOT_ATTACH_TO_PROCESS: u32 = 2;
pub const ERROR_COULD_NOT_OPEN_FILE: u32 = 3;
pub const ERROR_COULD_NOT_MAP_FILE: u32 = 4;
pub const ERROR_INVALID_FILE: u32 = 6;
pub const ERROR_CORRUPT_FILE: u32 = 7;
pub const ERROR_UNSUPPORTED_FILE_VERSION: u32 = 8;
pub const ERROR_INVALID_REGULAR_EXPRESSION: u32 = 9;
pub const ERROR_INVALID_HEX_STRING: u32 = 10;
pub const ERROR_SYNTAX_ERROR: u32 = 11;
pub const ERROR_LOOP_NESTING_LIMIT_EXCEEDED: u32 = 12;
pub const ERROR_DUPLICATED_LOOP_IDENTIFIER: u32 = 13;
pub const ERROR_DUPLICATED_IDENTIFIER: u32 = 14;
pub const ERROR_DUPLICATED_TAG_IDENTIFIER: u32 = 15;
pub const ERROR_DUPLICATED_META_IDENTIFIER: u32 = 16;
pub const ERROR_DUPLICATED_STRING_IDENTIFIER: u32 = 17;
pub const ERROR_UNREFERENCED_STRING: u32 = 18;
pub const ERROR_UNDEFINED_STRING: u32 = 19;
pub const ERROR_UNDEFINED_IDENTIFIER: u32 = 20;
pub const ERROR_MISPLACED_ANONYMOUS_STRING: u32 = 21;
pub const ERROR_INCLUDES_CIRCULAR_REFERENCE: u32 = 22;
pub const ERROR_INCLUDE_DEPTH_EXCEEDED: u32 = 23;
pub const ERROR_WRONG_TYPE: u32 = 24;
pub const ERROR_EXEC_STACK_OVERFLOW: u32 = 25;
pub const ERROR_SCAN_TIMEOUT: u32 = 26;
pub const ERROR_TOO_MANY_SCAN_THREADS: u32 = 27;
pub const ERROR_CALLBACK_ERROR: u32 = 28;
pub const ERROR_INVALID_ARGUMENT: u32 = 29;
pub const ERROR_TOO_MANY_MATCHES: u32 = 30;
pub const ERROR_INTERNAL_FATAL_ERROR: u32 = 31;
pub const ERROR_NESTED_FOR_OF_LOOP: u32 = 32;
pub const ERROR_INVALID_FIELD_NAME: u32 = 33;
pub const ERROR_UNKNOWN_MODULE: u32 = 34;
pub const ERROR_NOT_A_STRUCTURE: u32 = 35;
pub const ERROR_NOT_INDEXABLE: u32 = 36;
pub const ERROR_NOT_A_FUNCTION: u32 = 37;
pub const ERROR_INVALID_FORMAT: u32 = 38;
pub const ERROR_TOO_MANY_ARGUMENTS: u32 = 39;
pub const ERROR_WRONG_ARGUMENTS: u32 = 40;
pub const ERROR_WRONG_RETURN_TYPE: u32 = 41;
pub const ERROR_DUPLICATED_STRUCTURE_MEMBER: u32 = 42;
pub const ERROR_EMPTY_STRING: u32 = 43;
pub const ERROR_DIVISION_BY_ZERO: u32 = 44;
pub const ERROR_REGULAR_EXPRESSION_TOO_LARGE: u32 = 45;
pub const ERROR_TOO_MANY_RE_FIBERS: u32 = 46;
pub const ERROR_COULD_NOT_READ_PROCESS_MEMORY: u32 = 47;
pub const ERROR_INVALID_EXTERNAL_VARIABLE_TYPE: u32 = 48;
pub const ERROR_REGULAR_EXPRESSION_TOO_COMPLEX: u32 = 49;
pub const ERROR_INVALID_MODULE_NAME: u32 = 50;
pub const ERROR_TOO_MANY_STRINGS: u32 = 51;
pub const ERROR_INTEGER_OVERFLOW: u32 = 52;
pub const CALLBACK_MSG_RULE_MATCHING: u32 = 1;
pub const CALLBACK_MSG_RULE_NOT_MATCHING: u32 = 2;
pub const CALLBACK_MSG_SCAN_FINISHED: u32 = 3;
pub const CALLBACK_MSG_IMPORT_MODULE: u32 = 4;
pub const CALLBACK_MSG_MODULE_IMPORTED: u32 = 5;
pub const CALLBACK_CONTINUE: u32 = 0;
pub const CALLBACK_ABORT: u32 = 1;
pub const CALLBACK_ERROR: u32 = 2;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int32_t = ::std::os::raw::c_int;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __clock_t = ::std::os::raw::c_long;
pub type clock_t = __clock_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_internal_list>(),
        16usize,
        concat!("Size of: ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_internal_list>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_internal_list))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__prev as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_internal_list>())).__next as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_internal_list),
            "::",
            stringify!(__next)
        )
    );
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout___pthread_mutex_s() {
    assert_eq!(
        ::std::mem::size_of::<__pthread_mutex_s>(),
        40usize,
        concat!("Size of: ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        ::std::mem::align_of::<__pthread_mutex_s>(),
        8usize,
        concat!("Alignment of ", stringify!(__pthread_mutex_s))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__lock as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__lock)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__count as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__count)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__owner as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__owner)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__nusers as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__nusers)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__kind as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__kind)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__spins as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__spins)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__elision as *const _ as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__elision)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<__pthread_mutex_s>())).__list as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(__pthread_mutex_s),
            "::",
            stringify!(__list)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
    _bindgen_union_align: [u64; 5usize],
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(
        ::std::mem::size_of::<pthread_mutex_t>(),
        40usize,
        concat!("Size of: ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        ::std::mem::align_of::<pthread_mutex_t>(),
        8usize,
        concat!("Alignment of ", stringify!(pthread_mutex_t))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__data as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__size as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__size)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<pthread_mutex_t>())).__align as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(pthread_mutex_t),
            "::",
            stringify!(__align)
        )
    );
}
pub type YR_ARENA = [u64; 3usize];
pub type YR_MUTEX = pthread_mutex_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _YR_NAMESPACE {
    pub t_flags: [i32; 32usize],
    pub __bindgen_anon_1: _YR_NAMESPACE__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _YR_NAMESPACE__bindgen_ty_1 {
    pub name: *mut ::std::os::raw::c_char,
    pub name_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__YR_NAMESPACE__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_YR_NAMESPACE__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_YR_NAMESPACE__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_NAMESPACE__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_NAMESPACE__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_YR_NAMESPACE__bindgen_ty_1>())).name as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_NAMESPACE__bindgen_ty_1),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_YR_NAMESPACE__bindgen_ty_1>())).name_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_NAMESPACE__bindgen_ty_1),
            "::",
            stringify!(name_)
        )
    );
}
#[test]
fn bindgen_test_layout__YR_NAMESPACE() {
    assert_eq!(
        ::std::mem::size_of::<_YR_NAMESPACE>(),
        136usize,
        concat!("Size of: ", stringify!(_YR_NAMESPACE))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_NAMESPACE>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_NAMESPACE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_NAMESPACE>())).t_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_NAMESPACE),
            "::",
            stringify!(t_flags)
        )
    );
}
pub type YR_NAMESPACE = _YR_NAMESPACE;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _YR_META {
    pub type_: i32,
    pub integer: i64,
    pub __bindgen_anon_1: _YR_META__bindgen_ty_1,
    pub __bindgen_anon_2: _YR_META__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _YR_META__bindgen_ty_1 {
    pub identifier: *const ::std::os::raw::c_char,
    pub identifier_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__YR_META__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_YR_META__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_YR_META__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_META__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_META__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_YR_META__bindgen_ty_1>())).identifier as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_META__bindgen_ty_1),
            "::",
            stringify!(identifier)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_YR_META__bindgen_ty_1>())).identifier_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_META__bindgen_ty_1),
            "::",
            stringify!(identifier_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _YR_META__bindgen_ty_2 {
    pub string: *mut ::std::os::raw::c_char,
    pub string_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__YR_META__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_YR_META__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(_YR_META__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_META__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_META__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_META__bindgen_ty_2>())).string as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_META__bindgen_ty_2),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_META__bindgen_ty_2>())).string_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_META__bindgen_ty_2),
            "::",
            stringify!(string_)
        )
    );
}
#[test]
fn bindgen_test_layout__YR_META() {
    assert_eq!(
        ::std::mem::size_of::<_YR_META>(),
        32usize,
        concat!("Size of: ", stringify!(_YR_META))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_META>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_META))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_META>())).type_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_META),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_META>())).integer as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_META),
            "::",
            stringify!(integer)
        )
    );
}
pub type YR_META = _YR_META;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _YR_MATCHES {
    pub count: i32,
    pub __bindgen_anon_1: _YR_MATCHES__bindgen_ty_1,
    pub __bindgen_anon_2: _YR_MATCHES__bindgen_ty_2,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _YR_MATCHES__bindgen_ty_1 {
    pub head: *mut _YR_MATCH,
    pub head_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__YR_MATCHES__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_YR_MATCHES__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_YR_MATCHES__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_MATCHES__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_MATCHES__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_MATCHES__bindgen_ty_1>())).head as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_MATCHES__bindgen_ty_1),
            "::",
            stringify!(head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_MATCHES__bindgen_ty_1>())).head_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_MATCHES__bindgen_ty_1),
            "::",
            stringify!(head_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _YR_MATCHES__bindgen_ty_2 {
    pub tail: *mut _YR_MATCH,
    pub tail_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__YR_MATCHES__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_YR_MATCHES__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(_YR_MATCHES__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_MATCHES__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_MATCHES__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_MATCHES__bindgen_ty_2>())).tail as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_MATCHES__bindgen_ty_2),
            "::",
            stringify!(tail)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_MATCHES__bindgen_ty_2>())).tail_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_MATCHES__bindgen_ty_2),
            "::",
            stringify!(tail_)
        )
    );
}
#[test]
fn bindgen_test_layout__YR_MATCHES() {
    assert_eq!(
        ::std::mem::size_of::<_YR_MATCHES>(),
        24usize,
        concat!("Size of: ", stringify!(_YR_MATCHES))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_MATCHES>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_MATCHES))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_MATCHES>())).count as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_MATCHES),
            "::",
            stringify!(count)
        )
    );
}
pub type YR_MATCHES = _YR_MATCHES;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _YR_STRING {
    pub g_flags: i32,
    pub length: i32,
    pub __bindgen_anon_1: _YR_STRING__bindgen_ty_1,
    pub __bindgen_anon_2: _YR_STRING__bindgen_ty_2,
    pub __bindgen_anon_3: _YR_STRING__bindgen_ty_3,
    pub chain_gap_min: i32,
    pub chain_gap_max: i32,
    pub fixed_offset: i64,
    pub matches: [YR_MATCHES; 32usize],
    pub unconfirmed_matches: [YR_MATCHES; 32usize],
    pub clock_ticks: u64,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _YR_STRING__bindgen_ty_1 {
    pub identifier: *mut ::std::os::raw::c_char,
    pub identifier_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__YR_STRING__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_YR_STRING__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_YR_STRING__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_STRING__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_STRING__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_YR_STRING__bindgen_ty_1>())).identifier as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_STRING__bindgen_ty_1),
            "::",
            stringify!(identifier)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_YR_STRING__bindgen_ty_1>())).identifier_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_STRING__bindgen_ty_1),
            "::",
            stringify!(identifier_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _YR_STRING__bindgen_ty_2 {
    pub string: *mut u8,
    pub string_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__YR_STRING__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_YR_STRING__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(_YR_STRING__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_STRING__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_STRING__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_STRING__bindgen_ty_2>())).string as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_STRING__bindgen_ty_2),
            "::",
            stringify!(string)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_YR_STRING__bindgen_ty_2>())).string_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_STRING__bindgen_ty_2),
            "::",
            stringify!(string_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _YR_STRING__bindgen_ty_3 {
    pub chained_to: *mut _YR_STRING,
    pub chained_to_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__YR_STRING__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<_YR_STRING__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(_YR_STRING__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_STRING__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_STRING__bindgen_ty_3))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_YR_STRING__bindgen_ty_3>())).chained_to as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_STRING__bindgen_ty_3),
            "::",
            stringify!(chained_to)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_YR_STRING__bindgen_ty_3>())).chained_to_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_STRING__bindgen_ty_3),
            "::",
            stringify!(chained_to_)
        )
    );
}
#[test]
fn bindgen_test_layout__YR_STRING() {
    assert_eq!(
        ::std::mem::size_of::<_YR_STRING>(),
        1592usize,
        concat!("Size of: ", stringify!(_YR_STRING))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_STRING>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_STRING))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_STRING>())).g_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_STRING),
            "::",
            stringify!(g_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_STRING>())).length as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_STRING),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_STRING>())).chain_gap_min as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_STRING),
            "::",
            stringify!(chain_gap_min)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_STRING>())).chain_gap_max as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_STRING),
            "::",
            stringify!(chain_gap_max)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_STRING>())).fixed_offset as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_STRING),
            "::",
            stringify!(fixed_offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_STRING>())).matches as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_STRING),
            "::",
            stringify!(matches)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_STRING>())).unconfirmed_matches as *const _ as usize },
        816usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_STRING),
            "::",
            stringify!(unconfirmed_matches)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_STRING>())).clock_ticks as *const _ as usize },
        1584usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_STRING),
            "::",
            stringify!(clock_ticks)
        )
    );
}
pub type YR_STRING = _YR_STRING;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _YR_RULE {
    pub g_flags: i32,
    pub t_flags: [i32; 32usize],
    pub __bindgen_anon_1: _YR_RULE__bindgen_ty_1,
    pub __bindgen_anon_2: _YR_RULE__bindgen_ty_2,
    pub __bindgen_anon_3: _YR_RULE__bindgen_ty_3,
    pub __bindgen_anon_4: _YR_RULE__bindgen_ty_4,
    pub __bindgen_anon_5: _YR_RULE__bindgen_ty_5,
    pub clock_ticks: clock_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _YR_RULE__bindgen_ty_1 {
    pub identifier: *const ::std::os::raw::c_char,
    pub identifier_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__YR_RULE__bindgen_ty_1() {
    assert_eq!(
        ::std::mem::size_of::<_YR_RULE__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(_YR_RULE__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_RULE__bindgen_ty_1>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_RULE__bindgen_ty_1))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_YR_RULE__bindgen_ty_1>())).identifier as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_RULE__bindgen_ty_1),
            "::",
            stringify!(identifier)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<_YR_RULE__bindgen_ty_1>())).identifier_ as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_RULE__bindgen_ty_1),
            "::",
            stringify!(identifier_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _YR_RULE__bindgen_ty_2 {
    pub tags: *const ::std::os::raw::c_char,
    pub tags_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__YR_RULE__bindgen_ty_2() {
    assert_eq!(
        ::std::mem::size_of::<_YR_RULE__bindgen_ty_2>(),
        8usize,
        concat!("Size of: ", stringify!(_YR_RULE__bindgen_ty_2))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_RULE__bindgen_ty_2>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_RULE__bindgen_ty_2))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_RULE__bindgen_ty_2>())).tags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_RULE__bindgen_ty_2),
            "::",
            stringify!(tags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_RULE__bindgen_ty_2>())).tags_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_RULE__bindgen_ty_2),
            "::",
            stringify!(tags_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _YR_RULE__bindgen_ty_3 {
    pub metas: *mut YR_META,
    pub metas_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__YR_RULE__bindgen_ty_3() {
    assert_eq!(
        ::std::mem::size_of::<_YR_RULE__bindgen_ty_3>(),
        8usize,
        concat!("Size of: ", stringify!(_YR_RULE__bindgen_ty_3))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_RULE__bindgen_ty_3>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_RULE__bindgen_ty_3))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_RULE__bindgen_ty_3>())).metas as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_RULE__bindgen_ty_3),
            "::",
            stringify!(metas)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_RULE__bindgen_ty_3>())).metas_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_RULE__bindgen_ty_3),
            "::",
            stringify!(metas_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _YR_RULE__bindgen_ty_4 {
    pub strings: *mut YR_STRING,
    pub strings_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__YR_RULE__bindgen_ty_4() {
    assert_eq!(
        ::std::mem::size_of::<_YR_RULE__bindgen_ty_4>(),
        8usize,
        concat!("Size of: ", stringify!(_YR_RULE__bindgen_ty_4))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_RULE__bindgen_ty_4>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_RULE__bindgen_ty_4))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_RULE__bindgen_ty_4>())).strings as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_RULE__bindgen_ty_4),
            "::",
            stringify!(strings)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_RULE__bindgen_ty_4>())).strings_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_RULE__bindgen_ty_4),
            "::",
            stringify!(strings_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union _YR_RULE__bindgen_ty_5 {
    pub ns: *mut YR_NAMESPACE,
    pub ns_: i64,
    _bindgen_union_align: u64,
}
#[test]
fn bindgen_test_layout__YR_RULE__bindgen_ty_5() {
    assert_eq!(
        ::std::mem::size_of::<_YR_RULE__bindgen_ty_5>(),
        8usize,
        concat!("Size of: ", stringify!(_YR_RULE__bindgen_ty_5))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_RULE__bindgen_ty_5>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_RULE__bindgen_ty_5))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_RULE__bindgen_ty_5>())).ns as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_RULE__bindgen_ty_5),
            "::",
            stringify!(ns)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_RULE__bindgen_ty_5>())).ns_ as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_RULE__bindgen_ty_5),
            "::",
            stringify!(ns_)
        )
    );
}
#[test]
fn bindgen_test_layout__YR_RULE() {
    assert_eq!(
        ::std::mem::size_of::<_YR_RULE>(),
        184usize,
        concat!("Size of: ", stringify!(_YR_RULE))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_RULE>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_RULE))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_RULE>())).g_flags as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_RULE),
            "::",
            stringify!(g_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_RULE>())).t_flags as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_RULE),
            "::",
            stringify!(t_flags)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_RULE>())).clock_ticks as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_RULE),
            "::",
            stringify!(clock_ticks)
        )
    );
}
pub type YR_RULE = _YR_RULE;
pub type YR_EXTERNAL_VARIABLE = [u64; 3usize];
pub type YR_AC_TRANSITION_TABLE = u64;
pub type YR_AC_MATCH_TABLE = u64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _YR_MATCH {
    pub base: i64,
    pub offset: i64,
    pub match_length: i32,
    pub data_length: i32,
    pub data: *const u8,
    pub chain_length: i32,
    pub prev: *mut _YR_MATCH,
    pub next: *mut _YR_MATCH,
}
#[test]
fn bindgen_test_layout__YR_MATCH() {
    assert_eq!(
        ::std::mem::size_of::<_YR_MATCH>(),
        56usize,
        concat!("Size of: ", stringify!(_YR_MATCH))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_MATCH>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_MATCH))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_MATCH>())).base as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_MATCH),
            "::",
            stringify!(base)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_MATCH>())).offset as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_MATCH),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_MATCH>())).match_length as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_MATCH),
            "::",
            stringify!(match_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_MATCH>())).data_length as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_MATCH),
            "::",
            stringify!(data_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_MATCH>())).data as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_MATCH),
            "::",
            stringify!(data)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_MATCH>())).chain_length as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_MATCH),
            "::",
            stringify!(chain_length)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_MATCH>())).prev as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_MATCH),
            "::",
            stringify!(prev)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_MATCH>())).next as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_MATCH),
            "::",
            stringify!(next)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _YR_RULES {
    pub tidx_mask: [::std::os::raw::c_uchar; 4usize],
    pub code_start: *const u8,
    pub mutex: YR_MUTEX,
    pub arena: *mut YR_ARENA,
    pub rules_list_head: *mut YR_RULE,
    pub externals_list_head: *mut YR_EXTERNAL_VARIABLE,
    pub transition_table: YR_AC_TRANSITION_TABLE,
    pub match_table: YR_AC_MATCH_TABLE,
}
#[test]
fn bindgen_test_layout__YR_RULES() {
    assert_eq!(
        ::std::mem::size_of::<_YR_RULES>(),
        96usize,
        concat!("Size of: ", stringify!(_YR_RULES))
    );
    assert_eq!(
        ::std::mem::align_of::<_YR_RULES>(),
        8usize,
        concat!("Alignment of ", stringify!(_YR_RULES))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_RULES>())).tidx_mask as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_RULES),
            "::",
            stringify!(tidx_mask)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_RULES>())).code_start as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_RULES),
            "::",
            stringify!(code_start)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_RULES>())).mutex as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_RULES),
            "::",
            stringify!(mutex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_RULES>())).arena as *const _ as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_RULES),
            "::",
            stringify!(arena)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_RULES>())).rules_list_head as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_RULES),
            "::",
            stringify!(rules_list_head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_RULES>())).externals_list_head as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_RULES),
            "::",
            stringify!(externals_list_head)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_RULES>())).transition_table as *const _ as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_RULES),
            "::",
            stringify!(transition_table)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<_YR_RULES>())).match_table as *const _ as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(_YR_RULES),
            "::",
            stringify!(match_table)
        )
    );
}
pub type YR_RULES = _YR_RULES;
pub type YR_CALLBACK_FUNC = ::std::option::Option<
    unsafe extern "C" fn(
        message: ::std::os::raw::c_int,
        message_data: *mut ::std::os::raw::c_void,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type YR_COMPILER = [u64; 1264usize];
extern "C" {
    pub fn yr_compiler_create(compiler: *mut *mut YR_COMPILER) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_compiler_destroy(compiler: *mut YR_COMPILER);
}
extern "C" {
    pub fn yr_compiler_add_string(
        compiler: *mut YR_COMPILER,
        rules_string: *const ::std::os::raw::c_char,
        namespace_: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_compiler_get_rules(
        compiler: *mut YR_COMPILER,
        rules: *mut *mut YR_RULES,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_scan_mem(
        rules: *mut YR_RULES,
        buffer: *const u8,
        buffer_size: usize,
        flags: ::std::os::raw::c_int,
        callback: YR_CALLBACK_FUNC,
        user_data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_scan_fd(
        rules: *mut YR_RULES,
        fd: ::std::os::raw::c_int,
        flags: ::std::os::raw::c_int,
        callback: YR_CALLBACK_FUNC,
        user_data: *mut ::std::os::raw::c_void,
        timeout: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_save(
        rules: *mut YR_RULES,
        filename: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_rules_destroy(rules: *mut YR_RULES) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_initialize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_finalize() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn yr_get_tidx() -> ::std::os::raw::c_int;
}
